스택 메모리 (Stack Memory)
할당 시점: 함수 호출 시점에 할당되고 함수가 종료되면 해제됩니다.
컴파일 타임에 변수가 얼마나 필요한지 알고 있기 때문에,
실행 중에는 그 변수가 스택에서 얼마만큼의 공간을 차지할지 결정됩니다.
특징: LIFO (Last In, First Out) 방식으로 관리되며, 메모리 할당과 해제가 매우 빠릅니다.
용도: 지역 변수와 함수 매개변수의 저장에 사용됩니다.
크기 결정: 함수가 호출되면 스택 프레임이 생성되고,
함수가 종료되면 해당 스택 프레임이 제거됩니다. 
스택의 최대 크기는 프로그램 시작 시 운영 체제나 컴파일러 설정에 의해 결정될 수 있습니다.


동적메모리
할당 시점: 프로그램 실행 중 필요에 따라 런타임에 할당됩니다. 프로그래머가 malloc, calloc, realloc, free 
같은 함수를 사용해 직접 메모리를 관리합니다.
특징: 힙(Heap) 영역을 사용하며, 메모리의 크기와 수명을 프로그래머가 제어할 수 있습니다. 메모리 누수와 같은 문제가 발생할 수 있습니다.
용도: 프로그램 실행 중 크기가 결정되는 데이터 구조(예: 연결 리스트, 동적 배열 등)에 사용됩니다.
크기 결정: 실행 중에 필요에 따라 할당되고, 프로그래머가 명시적으로 해제하기 전까지 유지됩니다.

주요 차이점
할당 및 해제:

스택 메모리: 함수 호출 시 자동으로 할당되고, 함수가 종료되면 자동으로 해제됩니다.
동적 메모리(힙): 프로그래머가 명시적으로 할당하고 해제해야 합니다.
크기 및 유연성:

스택 메모리: 함수 내에서 미리 정의된 크기의 변수만 사용할 수 있습니다. 크기가 컴파일 타임에 결정되며, 고정적입니다.
동적 메모리: 프로그램 실행 중에 크기를 변경할 수 있습니다. 매우 유연합니다.
요약
스택 메모리는 함수 호출 시 자동으로 할당되고 해제되며, 크기가 고정적입니다. 이는 정적인 메모리 할당 방식에 가깝습니다.
**동적 메모리(힙)**는 런타임에 프로그래머가 직접 할당하고 해제하는 방식으로, 크기가 유동적입니다.
따라서, 스택 메모리는 함수 호출 시점에서 동적으로 할당된다는 점에서 "동적"이라는 특성을 가지지만,
실제로는 크기와 수명이 정적으로 결정된다는 점에서 동적 메모리와는 다릅니다. 
동적 메모리는 주로 힙 영역에서 사용되며, 실행 중에 메모리 크기와 수명이 유동적으로 관리됩니다.


정적 메모리와 스택 메모리의 차이
정적 메모리와 스택 메모리는 모두 크기와 수명이 명확히 정의되어 있지만, 관리 방식에서 차이가 있습니다.

정적 메모리 (Static Memory):

할당 시점: 프로그램 시작 시 할당됩니다.
해제 시점: 프로그램 종료 시 해제됩니다.
사용 예시: 전역 변수, 정적 변수. 

할당 시점: 함수 호출 시 할당됩니다.
해제 시점: 함수 종료 시 해제됩니다.
 
 
요약
정적 메모리: 프로그램 시작 시 할당되고 종료 시까지 유지됩니다. 전역 변수와 정적 변수에 사용됩니다.
스택 메모리: 함수 호출 시 할당되고 함수가 종료되면 해제됩니다. 지역 변수와 함수 매개변수에 사용됩니다.
따라서, 스택 메모리는 함수 호출 시점에 동적으로 할당되지만, 그 크기는 컴파일 타임에 미리 결정된다는 점에서 정적 메모리와의 유사성이 있습니다. 
그러나 스택 메모리는 여전히 함수 호출과 반환에 따라 동적으로 할당되고 해제되는 특성을 가지고 있으므로, 이를 정적 메모리라고 하기에는 적절하지 않습니다.



