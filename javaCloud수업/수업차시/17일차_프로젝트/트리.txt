class Node {
    int value;
    Node left;
    Node right;

    // 생성자
    public Node(int value) {
        this.value = value;
        left = null;
        right = null;
    }
}


class BinaryTree {
    Node root;

    // 생성자
    public BinaryTree() {
        root = null;
    }

    // 노드를 삽입하는 메서드
    public void add(int value) {
        root = addRecursive(root, value);
    }

    // 재귀적으로 노드를 삽입하는 헬퍼 메서드
    private Node addRecursive(Node current, int value) {
        if (current == null) {
            return new Node(value);
        }

        if (value < current.value) {
            current.left = addRecursive(current.left, value);
        } else if (value > current.value) {
            current.right = addRecursive(current.right, value);
        }

        return current;
    }

    // 트리를 중위순회(in-order)하는 메서드
    public void traverseInOrder(Node node) {
        if (node != null) {
            traverseInOrder(node.left);
            System.out.print(" " + node.value);
            traverseInOrder(node.right);
        }
    }

    // 트리에서 특정 값을 탐색하는 메서드
    public boolean containsNode(int value) {
        return containsNodeRecursive(root, value);
    }

    // 재귀적으로 노드를 탐색하는 헬퍼 메서드
    private boolean containsNodeRecursive(Node current, int value) {
        if (current == null) {
            return false;
        }
        if (value == current.value) {
            return true;
        }
        return value < current.value
          ? containsNodeRecursive(current.left, value)
          : containsNodeRecursive(current.right, value);
    }
}

////
public class Main {
    public static void main(String[] args) {
        BinaryTree bt = new BinaryTree();

        bt.add(6);
        bt.add(4);
        bt.add(8);
        bt.add(3);
        bt.add(5);
        bt.add(7);
        bt.add(9);

        // 트리를 중위순회(In-order traversal)
        bt.traverseInOrder(bt.root); // 출력: 3 4 5 6 7 8 9

        // 특정 값이 트리에 있는지 확인
        System.out.println(bt.containsNode(5)); // 출력: true
        System.out.println(bt.containsNode(10)); // 출력: false
    }
}

