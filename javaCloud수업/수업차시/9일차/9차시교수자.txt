

자바 9일차 학습목표  (객체지향 프로그램의 시작 !! , 캡슐화의 시작: 데이터 보호 )
 
 
1.  구조화된 데이타 타입을 만들 수 있다.   (class Type :사용자정의 자료형 )
2.  절차지향코드와 객체지향 코드를 차이를 경험한다 ( this  경험하기 , 언제 this가 제공되는가 ?)
3.  고객정보를 담을 class를 작성하여 객체지향 방식으로 고객정보를 저장하고 출력할 수 있다.   
4.  class와  객체를 구분할 수 있다.  (무엇을 객체라고 부르는가?) 
5.. 참조형변수와 null값의 의미를 말할 수 있다.
6.  new의 역할을 말할 수 있다.
7.  객체지향프로그램은 데이타 + 데이터를 다루는 함수(매서드) 를  하나의 단위( 캡슐화)로  프로그래밍한다는  것을 인지한다
8.  단단한 캡슐을 위한 도구로 접근제한자 와 생성자가를 사용한다는 것을 이해한다.
9.  객체지향 코딩을 작성하는 경험을 갖는다 (객체모델링)  ( sample 제공  자판기프로그램 ) 


절차지향
 구조화된 데이타
 함수 

 vs

객체지향
  구조화된 데이타  + 함수




실습: 
1.  실문문제1 풀기 
    쇼핑몰 정보 ,  제임스씨고객정보를  ClassType으로 지정하고    
    - input() ,   getInfo() 이용하여 값을 저장하고  값을 출력하기

2.  2인 1조   객체데이터 표현하기  (원하는 데이터를 객체로 다루기)   , 발표,   객체모델링 해보기
     자판기객체코딩을 샘플로  객체코딩 예제 하나 만들기
     클래스를 정의하고  객체를 사용하여 코딩하기
 

2인1조 짝궁 : 짝궁실습은  꼭 자신의 짝궁과 해결해 주세요 !         


오늘의 2인1조 짝궁!
 







class Type   맛보기
변수
객체라고 부르는가?     (캡슐화) 알아보기

절차지향과 객체지향 비교 코드 보기  (데이터 +데이터를 다루는 기능) 멀리 떨어져 있다면? 유지보수가 힘들어짐  , this제공
캡슐화 - 데이터 + 데이터 다루는 기능   , 접근제어자  , 데이터보호    - 캡슐화

데이터 + 데이터가 제공하는 기능이 하나의 단위로 제공된다
접근제어자로 : 보일것과 보이지않을 것을 결정합니다
생성자라는 문법이 제공됨
=> 데이터보호


기존의 변수와의 차이가 있다.
=> 객체라고 부른다

  

1) Customer 클래스 만들기
2) 클래스 type  변수 만들고 값넣기 
데이터 + 다루는 매서드를 하나의 단위로 개발하겠다 !     (인스턴수 변수)

3) 객체의  매서드를 통해서 값넣기
4) 객체의 생성자를 통해서 값넣기

연관된 데이터와 데이터를 다루는 함수를 함께 묶어 외부에서는 필요한 인터페이스만을 노출한다.(




 	s.append("캡슐화  (encapsulation)") ;		 
		s.append("   : 데이터와 데이터를 다루는 매서드(기능)가 하나로 묶여있음 ") ;
                                   생성된 객체를 통해서 매서드를 호출할 수 있다 

		s.append("    생성된 객체를 통해서 매서드를 호출할 때 객체의 정보가 전달된다=> this자기참조형변수  ");
		s.append("    생성자, 접근제어자를 통해서 단단한 캡슐을 보장함");
		s.append("   데이터보호를 얻음 ( 특정변수(객체)의 값을 정해진 방법으로만 다룰 수 있게 하겠다) ");
		
		

순서적으로 경험  !!
 
0. 맛보기 , 자료형으로 사용하고 값넣고 조회하기
1. 구조화된 형태 + 함수 => 절차지향 맛보기
2, 캡슐화 (데이타 +관련있는 함수)  하나의 묶음 단위  - input   printInfo
3. 캡슐화 생성자

학생성적 모델링 - 성적처리 
자판기모델링 - 자판기 코드





2025-02-26 일


1) 현기님 코드에서 질문
3) 데이타+ 함수를 묶는다 (캡슐화
2) 절차지향코드 작성
2) 학생성적처리 프로그램 두 가지 방법으로 풀어보기
3) 객체지향코드 캡슐화하기 1단계

5) 학생들 예제로 캡슐화하여 코딩하기
6) 단단한 캡슐을 위한 도구 (접근제한자, 생성자 ) 생성자
4) 객체지향 코드 캡슐화하기 2단계
5) 용어정리 
6) 객체모델링  ( 속성 +기능 찾기)

  기능 - 값을 넣는 기능 (저장하고 읽어오는 두 개의 기능이 기본적이다)

         - 값을 출력하는 기능 


수업내용 순서)
절차지향코드 경험하기 
데이터+함수 묶으면 좋은가? 알아보기

묶으면서  static 키워드 사라짐 
객체생성 이후부터 사용가능한 인스턴스매서드, 객체매서드가 됨 
이 때  첫번째 매개변수 ( this라는 이름) 로 생성된 객체의 정보가 전달됨

두 개의 코드를 보면서 
this를 찾아보자 


1) static이 없는 매서드는  바로 사용할 수 없다. 객체 생성후 사용가능하다
  생성된 객체의 주소가 전달됨  (객체, 객체변수의 데이터를 사용하는 기능이기 때문이다)

  => static 은   this 가 전달되지 않는다 라고 한다   (당연한 이야기이다 )






 



 

