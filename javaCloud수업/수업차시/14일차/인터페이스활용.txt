
***********************************************************
객체지향언어에서 인터페이스를 사용하는 경우 ?  
    (약속 - 느슨한결합을 위한 약속
     약속 - 미완성부분을 위한 약속 (결정할 수 없는 코드에 대한 약속)
     


인터페이스로 얻을 수 있는 것 !

- 개발을 독립적으로 할 수 있다. 
- 테스트를 쉽게 할 수 있다.
- 특정 객체에 의존하지 않는 프로그래밍을 할 수 있다.
- 라이브러리를 만들 때 정할 수 없는 부분은 인터페이스로 만들고 사용할 수 있다.
(  객체를 정렬해 주는 라이브러리가 있다 . - 멋진알고리즘을 사용할 수 있지만  객체의 정렬의 기준은 알 수 없다 - 결정할 수 없는 부분은 어떻게 하는가?)
( 인터페이스를 통해 약속을 만든다)

  
 

인터페이스를 기반한 프로그램작성하기 !

1. 각자가 작성한 프로그램을 실행시켜주는 SimpleGame클래스를 작성해야 한다고 생각해 보자
2. 각 개발자는 각기 다른 클래스이름의 각기 다른 매서드이름을 정의할 수 있다.
3. 그러므로 SimpleGame을 작성하는 사람은 각 개발자가 작성한 클래스가 만들어지기를 기다려야 한다.
4. 독립적인 개발이 되지 않는다. 독립적인 개발을 위해서 
5. 약속 (인터페이스)를 정하고  SimpleGame을 작성할 수 있다.
4. SimpleGame을 작성해야 하는 사람이 MyRunnable 인터페스를  작성한다.   
5. 아직 각자 실행할  프로그램이 작성되지 않았더라도  SimpleGame 을 작성한 사람은 프로그램을 완성할 수 있다
5. 물론 정상적인 실행을 위해서는  인터페이스를 구현한 객체가 필요하다.

///////////////////////////////////
CalculatorI 인터페이스 만나기

interface  MyRunnable{
        void run();
}
 

//클래스와 클래스간의 관계
// is a   상속 관계
// has a 포함 관계

/////////////////////////////////
class SimpleGame{   
     
    public void myRun  (  MyRunnable   r ) {
                System.out.println( " 당신의 프로그램을 실행시켜 드립니다 " );
                for( int i=1; i<=2; i++){
                     r.run();
                }
   } 
  public static void  main(String[] args ) {
              SimpleGame game= new SimpleGame();
              //game.setR(   ) ; //<= 인터페이스를 구현한 객체를 넘겨줘야 한다.   
                             // <= 인터페이스를 구현한 클래스 만들기,  객체생성하기 , 객체를 인자로 넘기기
              game.myRun( ); // 
  } 
}















