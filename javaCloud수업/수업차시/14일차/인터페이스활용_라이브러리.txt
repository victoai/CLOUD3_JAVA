
***********************************************************
객체지향언어에서 인터페이스를 사용하는 경우 ?  

    (약속 - 느슨한결합을 위한 약속 
     약속 - 미완성부분을 위한 약속 (결정할 수 없는 코드에 대한 약속)
     


인터페이스로 얻을 수 있는 것 !

- 개발을 독립적으로 할 수 있다. 
- 테스트를 쉽게 할 수 있다.
- 특정 객체에 의존하지 않는 프로그래밍을 할 수 있다.  (느슨한결합, 약한 결합) 
- 라이브러리를 만들 때 정할 수 없는 부분은 인터페이스로 만들고 사용할 수 있다.
(  객체를 정렬해 주는 라이브러리가 있다 . - 멋진알고리즘을 사용할 수 있지만  객체의 정렬의 기준은 알 수 없다 - 결정할 수 없는 부분은 어떻게 하는가?)
( 인터페이스를 통해 약속을 만든다)

  
 

인터페이스를 기반한 프로그램작성하기 !
 
///////////////////////////////////
CalculatorI 인터페이스 만나기

interface  MyRunnable{
        void run();
}
 
객체 관계 
//클래스와 클래스간의 관계
// is a   상속 관계
// has a 포함 관계
//매개변수로 사용하는 관계

/////////////////////////////////
class MyLib{   
     
    public void myRun  (  MyRunnable   r ) {
                System.out.println( " 당신의 프로그램을  3번  실행시켜 드립니다 " );

                for( int i=1; i<=3; i++){
                     r.run();
                }
   } 
 
}




class WJY implements  MyRunnable{
     public void run(){
            System.out.println("잘하고 있어요 ^^ "); 
     }

}










