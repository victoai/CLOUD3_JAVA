1. 모든 객체를 Object 타입으로 다룰 수 있음
Object가 존재하기 때문에, 어떤 클래스의 객체든 Object 타입으로 저장하고 다룰 수 있습니다.
즉, 모든 객체는 Object 타입의 변수로 참조할 수 있으며, 다형성을 지원합니다.
 
Object obj1 = new String("Hello");
Object obj2 = new Customer("홍길동" ,25);
Object obj3 = new Score("홍길동",100,90);


toString() 매서드를 사용하여 
객체의 정보를 객체지향적으로 얻기 

 
2. 라이브러리에서 공통 타입으로 활용할 수 있음
컬렉션 프레임워크(List, Set, Map 등)는 다양한 타입의 객체를 저장해야 합니다.
Object 타입을 사용하면 모든 객체를 저장하고 관리할 수 있습니다.
 
ArrayList<Object> list = new ArrayList<>();
list.add("Java");
list.add(42);
list.add(new Date());

이렇게 하면 ArrayList가 다양한 타입을 다룰 수 있습니다.

3. 공통 기능을 제공하여 일관된 동작을 가능하게 함
Object 클래스는 모든 객체가 기본적으로 가져야 할 공통 메서드를 제공합니다.

대표적인 메서드:

메서드	설명
toString()	객체의 문자열 표현을 반환 (기본은 패키지명 + 해시값)
equals(Object obj)	두 객체가 같은지 비교 (주소 비교, 필요하면 오버라이딩)
hashCode()	객체의 해시 코드 값 반환 (해시 기반 컬렉션에서 사용)
getClass()	객체의 클래스 정보를 반환
clone()	객체를 복제 (사용하려면 Cloneable 인터페이스 필요)
 
결론
✔ Object는 모든 객체의 공통 부모로서, 다형성을 지원하고, 객체의 공통 기능을 제공하는 역할을 합니다.
✔ 만약 Object가 없다면, 자바에서 모든 객체를 저장하고 다룰 공통 타입이 없어져 불편해질 것입니다.

더 궁금한 점 있으면 질문 주세요! 😊




Object 
  : toString()


객체는 모두  Object로 다뤄질 수 있다 
Object로 다뤄지면서  toString() 매서드를 오버라이드하여  객체의 정보를 제공할 수 있도록 해야 한다.





