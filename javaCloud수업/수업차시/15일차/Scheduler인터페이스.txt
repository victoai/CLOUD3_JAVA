public  interface Scheduler{
     public void getNextCall();
     public void sendCallToAgent();
}

//현재상담 업무가 없거나 상담대기가 가장 적은 상담원에게 배분
public class LeastJob implements Scheduler{

 public void getNextCall() {
         System.out.println( "상담 전화를 순서대로 대기열에서 가져옵니다");
 }

 public void sendCallToAgent() {
         System.out.println( "현재상담 업무가 없거나 대기가 가장 적은 상담원에게 할당됩니다");
 }
}


///
//고객 등급이 높은 고객의 전화부터 대기열에서 가져와 업무 능력이 높은 상담원 우선 배분
public class PriorityAllocation implements Scheduler{
      public void getNextCall() {
          System.out.println( "고객등급이 높은 고객의 전화를 먼저 가져옵니다"); 
      }
     public void sendCallToAgent() {
       System.out.println(  "업무 skill 값이 높은 상담원에게 우선적으로 배분합니다");
    }
}

///상담원 한 명씩 돌아가며 동일하게 상담 업무 배분
class RoundRobin implements Scheduler{

     public void getNextCall() {
           System.out.println(  "상담전화를 순서대로 대기열에서 가져옵니다 ");
     }

    public void sendCallToAgent() {
         System.out.println(  "다음 순서 상담원에게 배분합니다");
    }
}


////
public class SchedulerTest {
   public static void main(String[] args) throws  IOException {
         System.out.println( "전화 상담 할당 방식을 선택하세요");
         System.out.println(" R: 한명씩 차례로 할당");
         System.out.println(" L: 쉬고 있거나 대기가 가장 적은 상담원에게 할당");
         System.out.println(" P : 우선순위가 높은 고객 먼저 할당 " )
        
         int ch = System.in();
         Scheduelr  scheduler =null;

         if( ch == 'R'  || ch =='r' ) {
               scheduler  = new RoundRobin();
         }else if(  ch  =='L'  || ch =='l'){
               scheduler  = new  LeastJob():
          }else if( ch  == 'P' ||  ch =='p' )  {

              scheduler = new PriorityAllocation();
          } else{
               System.out.println("지원되지 않는다");
               return ;
          }


         scheduler.getNextCall();
         scheduler.sendCallToAgent();
  }

}



