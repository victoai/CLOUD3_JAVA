
0.변수, 연산자, if, switch, for, while, do~while
1. 배열만들고 출력하기 (자바조명단)
2.1차원배열, 2차원배열, 3차원배열 맛보기 
   1차원배열: 사고싶은거 
   2차원배열: 자바 조별명단 
   3차원배열 : 1학년 - 1반
                              2반
                              3반
                   2학년  -1반
                              2반
                              3반

                   3학년


3. 함수만들기 
    -매개변수와 반환 
4. 구조화된 데이터
5. 절차지향 코딩
6. 객체지향코딩- 생성자  , 접근제어  , this, 
7. 상속 
8. Object
9. toString() , 생성자로  객체지향적으로 값 넣고 가져오기 
10. 업캐스팅과 다운캐스팅
11. 올바른 다운캐스팅과  잘못된 다운캐스팅
12. 객체지향코딩의 맛 -다형성 
     모든 객체는 Object로 다룰 수 있다 
     부모타입으로 자식을 다루게 되면 좋은 점

  -부모 타입 변수로 여러 자식 타입을 담을 수 있음.
  -메서드 인자로 다형성 지원(메서드를 작성할 때 특정 구현체 대신 부모 타입을 받도록 하면 확장성이 커짐.)
  -부모 타입을 기준으로 작성하면, 내부 구현체를 바꿀 때 코드 변경이 최소화됨.


13. 인터페이스란
     : 구현해야하는 약속

14. 인터페이스 역할  (어떤 경우에 인터페이스를 사용하는가)
     -1. 규약(Contract) 제공
        인터페이스는 "이 메서드를 반드시 구현해야 한다"는 규칙을 정의합니다.
     2. 다형성(Polymorphism) 지원
     3. 의존성 감소 (결합도 낮추기)
     4. 다중상속 지원
    
   규현해야하는 규칙을 정할 때 사용
   (라이브러만들 때 결정할 수 없는 코드 작성시 인터페이스 사용)
   (느슨한결합의 의존성이 낮은 코드 작성시)



📌 자바 인터페이스의 주요 역할 (정리된 3가지)

구현해야 하는 규칙을 정의할 때 사용
→ 인터페이스는 메서드 시그니처만 정의하고, 구현은 각 클래스가 맡도록 강제합니다.

라이브러리나 프레임워크에서 "구현을 알 수 없는 부분"을 열어둘 때 사용
→ 라이브러리를 만들 때는 구체적인 구현을 정할 수 없으므로, 인터페이스로 "이런 동작을 지원해야 한다"는 규약만 제공합니다.
(예: JDBC의 Connection, PreparedStatement)

느슨한 결합(의존성이 낮은 코드)을 만들 때 사용
→ 클래스가 구체적인 구현체가 아니라 인터페이스에 의존하면, 구현체를 교체하거나 확장하기가 훨씬 쉬워집니다.


"구현을 분리한다"는 것은 **사용하는 쪽(인터페이스)**과 **구현하는 쪽(클래스)**을 분리하여,
코드를 유연하게 확장하고 유지보수하기 쉽게 만든다는 의미입니다.

15.  객체배열 정렬하기  -Comparator, Comparable 

16. 예외처리
    -checked  Exception
    -unchecked Exception
    try-catch,  thorws, throw

18. io 스트림 

     System.in
     System.out
    
    Scanner, 
    BufferedReader , InputStreamReader 


   FileInputStream, FileOutputStream, 
   FiileReader, FileWriter


     


19. 멀티스레드 
     Thread, Runnable
20. 네트워크 프로그램: 소켓
    


